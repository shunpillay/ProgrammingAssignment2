x <- 5
x <- 5
x
msg <- "hello"
msg
msg <- "hello", "boo"
msg <- ["hello", "boo"]
msg <- ("hello", "boo")
mylist <- 4:10
mylist
#Boo!
5_4
5+4
mylist <- 4:10
mylist[3]
mylist[2]
mylist <- 4:50
mylist
mylist <- 4:0.5:50
mylist
b <- vector()
b
b <- vector(numeric,10)
b <- vector(4:12)
b <- vector((4:12)
)
b <- vector((4:12))
attribute(mylist)
attributes(mylist)
mylist
attributes(mylist)
attr(mylist)
attributes(mylist) <- "Boo"
attributes(mylist) <- ["Boo", "Woo"]
attributes(mylist) <- {"Boo", "Woo"}
attributes(mylist) <- ("Boo", "Woo")
attributes(mylist) <- list("Boo", "Woo")
attributes(mylist) <- list("Boo"; "Woo")
attributes(mylist) <- list(a="Boo"; b="Woo")
attributes(mylist) <- list(Woo")
"
"
attributes(mylist) <- list(Woo")
attributes(mylist) <- list("Woo")
attributes(mylist) <- list(x=1, y=3)
attributes(mylist)
c <- vector(mode="numeric", length = 10)
c
a <- c(0.5,0.6)
a
a <- c(TRUE,FALSE)
a
a <- c(T,F)
a
a <- c("a","b","c")
a
a <- 9:29
a
a <- c(1+5i, 4+7i)
a
vector("numberic",20)
vector("numeric",20)
vector("numeric",200000000)
vector("numeric",2000000)
vector("numeric",200000)
vector("numeric",20000)
vector("numeric",2000)
vector("numeric",5000)
vector("numeric",8000)
vector("numeric",9000)
vector("numeric",9999)
vector("numeric",10000)
vector("numeric",10001)
vector("numeric",50000)
vector("numeric",40000)
vector("numeric",20000)
vector("numeric",10000)
vector("numeric",15000)
vector("numeric",11000)
vector("numeric",10020)
vector("numeric",10019)
vector("numeric",10018)
vector("numeric",10010)
vector("numeric",10008)
vector("numeric",10004)
vector("numeric",10002)
vector("numeric",10001)
vector("numeric",10002)
vector("numeric",10001)
f<-vector("numeric",10001)
c(1.7,"a")
c(TRUE,2)
c("a",TRUE)
x = 0:6
x
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
x = c("a","b","c")
a
x
as.logical(x)
aas.complex(x)
as.complex(x)
as.numeric(x)
x <- list(1, "a", TRUE, 1+4i)
a
x
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- 1:10
m
dim(m)
dim(m) <- c(2,5)
m
x <- 1:3
x
y <- 10:12
y
cbind(x,y)
rbind(x,y)
dataSubset <- subset(dataFullset, dataFullset$Date == startDate | dataFullset$Date == endDate)
serch()
search()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
a
x
if(x > 5) {
x <- 0
}
x
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(nlme)
?nlme
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(datasets)
data(iris)
?iris
iris
iris$Sepal.Length
mean(iris$Sepal.Length)
f <- iris$Species[virginica]
f <- iris$Species["virginica"]
f
f <- iris[Species = "virginica""]
]
]
]
]
]
]
]
]
]
]
]}
{}
{}
{}{}{}{}
{}
library(datasets)
data(iris)
iris[iris$Species=="virginica"]
iris
iris$Species
iris$Species=="virginica"
f <- iris$Species=="virginica"
tapply(iris$Sepal.Length, f, mean)
tapply(iris$Sepal.Length,mean)
mean(iris$Sepal.Length)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
debug(ls)
ls
ls
?debug
setwd("~/Desktop/data-science-specialization-coursera/02-r-programming/assignment-2/ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
